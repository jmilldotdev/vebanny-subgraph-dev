// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class VeNftToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VeNftToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VeNftToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VeNftToken", id.toString(), this);
    }
  }

  static load(id: string): VeNftToken | null {
    return changetype<VeNftToken | null>(store.get("VeNftToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): i32 {
    let value = this.get("tokenId");
    return value!.toI32();
  }

  set tokenId(value: i32) {
    this.set("tokenId", Value.fromI32(value));
  }

  get tokenUri(): string {
    let value = this.get("tokenUri");
    return value!.toString();
  }

  set tokenUri(value: string) {
    this.set("tokenUri", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get lockInfo(): string {
    let value = this.get("lockInfo");
    return value!.toString();
  }

  set lockInfo(value: string) {
    this.set("lockInfo", Value.fromString(value));
  }
}

export class LockInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LockInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LockInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LockInfo", id.toString(), this);
    }
  }

  static load(id: string): LockInfo | null {
    return changetype<LockInfo | null>(store.get("LockInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get end(): i32 {
    let value = this.get("end");
    return value!.toI32();
  }

  set end(value: i32) {
    this.set("end", Value.fromI32(value));
  }

  get duration(): i32 {
    let value = this.get("duration");
    return value!.toI32();
  }

  set duration(value: i32) {
    this.set("duration", Value.fromI32(value));
  }

  get useJbToken(): boolean {
    let value = this.get("useJbToken");
    return value!.toBoolean();
  }

  set useJbToken(value: boolean) {
    this.set("useJbToken", Value.fromBoolean(value));
  }

  get allowPublicExtension(): boolean {
    let value = this.get("allowPublicExtension");
    return value!.toBoolean();
  }

  set allowPublicExtension(value: boolean) {
    this.set("allowPublicExtension", Value.fromBoolean(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}
